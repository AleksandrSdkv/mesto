(()=>{"use strict";var e=document.querySelector(".profile__name"),t=document.querySelector(".profile__about"),n=document.querySelector(".profile__edit-button"),r=document.querySelector(".popup_type_profile"),o=document.querySelector(".element-list"),i=r.querySelector(".form"),a=r.querySelector(".form__input_type_name"),u=r.querySelector(".form__input_type_about"),c=document.querySelector(".popup_type_place"),s=c.querySelector(".form"),l=(c.querySelector(".form__input_type_name"),c.querySelector(".form__input_type_about"),document.querySelector(".popup_type_pic")),f=document.querySelector(".profile__place-button"),p=document.querySelector(".popup_type_notification"),h=document.querySelector(".profile__overlay"),y=document.querySelector(".popup_type_for-avatar"),d=y.querySelector(".form");function _(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function m(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var v=function(){function e(t,n){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),m(this,"resetVadlidation",(function(){r._inputList.forEach((function(e){return r._hideInputError(e)}))})),m(this,"_setEventListeners",(function(){r.toggleButtonState(),r._inputList.forEach((function(e){e.addEventListener("input",(function(){r._isValidity(e),r.toggleButtonState()}))}))})),this._config=t,this._formElement=n,this._inputList=Array.from(n.querySelectorAll(t.inputSelector)),this._buttonElement=n.querySelector(t.submitButtonSelector)}var t,n;return t=e,(n=[{key:"_isValidity",value:function(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}},{key:"_hasInvalidInput",value:function(){return this._inputList.some((function(e){return!e.validity.valid}))}},{key:"_showInputError",value:function(e){var t=this._formElement.querySelector(".".concat(e.id,"-error"));console.log(t),e.classList.add(this._config.inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._config.errorClass)}},{key:"_hideInputError",value:function(e){var t=this._formElement.querySelector(".".concat(e.id,"-error"));e.classList.remove(this._config.inputErrorClass),t.classList.remove(this._config.errorClass),t.textContent=""}},{key:"toggleButtonState",value:function(){this._hasInvalidInput()?this._setDisabledButton():this._setEnabledButton()}},{key:"_setDisabledButton",value:function(){this._buttonElement.classList.add(this._config.inactiveButtonClass),this._buttonElement.disabled=!0}},{key:"_setEnabledButton",value:function(){this._buttonElement.classList.remove(this._config.inactiveButtonClass),this._buttonElement.disabled=!1}},{key:"enableValidation",value:function(){this._setEventListeners()}}])&&_(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function b(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var g=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._data=t,this._onLikeHandler=r.onLike,this._removePic=r.onDeleteCard,this._handleCardClick=r.onClick,this._cardTemplate=n,this._element=this._getTemplate(),this.maskGroupImg=this._element.querySelector(".element__mask-group"),this.maskGroupName=this._element.querySelector(".element__place-name"),this._likeButton=this._element.querySelector(".element__like-button"),this._btnRemoveCard=this._element.querySelector(".element__btn-remove"),this.likesElement=this._element.querySelector(".element__like-counter"),this.maskGroupImg.src=this._data.link,this.maskGroupName.textContent=this._data.name,this.maskGroupImg.alt=this._data.name,this.likesElement.textContent=this._data.likes.length,this.isLiked()?this._likeButton.classList.add("element__like-button_active"):this._likeButton.classList.remove("element__like-button_active"),this.isOwner()||this._btnRemoveCard.remove(),this._setEventListeners()}var t,n;return t=e,(n=[{key:"isLiked",value:function(){var e=this;return this._data.likes.some((function(t){return e._data.currentUser.id===t._id}))}},{key:"isOwner",value:function(){return this._data.currentUser.id===this._data.owner._id}},{key:"_handleLike",value:function(){var e=this;this._onLikeHandler(this._data,(function(t){e._data.likes=t,e._likeButton.classList.toggle("element__like-button_active",e.isLiked()),e.likesElement.textContent=e._data.likes.length}))}},{key:"_getTemplate",value:function(){return document.querySelector(this._cardTemplate).content.querySelector(".element").cloneNode(!0)}},{key:"generateCard",value:function(){return this._element}},{key:"_setEventListeners",value:function(){var e=this;this._likeButton.addEventListener("click",(function(){e._handleLike()})),this._btnRemoveCard.addEventListener("click",(function(){e._removePic(e._data,(function(){e._handleTrashBtnClick()}))})),this.maskGroupImg.addEventListener("click",(function(){e._handleCardClick({name:e._data.name,link:e._data.link})}))}},{key:"_handleTrashBtnClick",value:function(){this._element.remove(),this._element=null}}])&&b(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function k(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var w=function(){function e(t,n){var r=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._functionRender=r,this._container=n}var t,n;return t=e,(n=[{key:"renderItems",value:function(e){var t=this;e.reverse().forEach((function(e){return t._functionRender(e)}))}},{key:"addItem",value:function(e){this._container.prepend(e)}}])&&k(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function S(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var E=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._popupSelector=t,this._handleEscCloseBinded=this._handleEscClose.bind(this)}var t,n;return t=e,(n=[{key:"open",value:function(){this._popupSelector.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscCloseBinded)}},{key:"close",value:function(){this._popupSelector.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscCloseBinded)}},{key:"_handleEscClose",value:function(e){"Escape"===e.key&&this.close()}},{key:"setEventListeners",value:function(){var e=this;this._popupSelector.addEventListener("mousedown",(function(t){(t.target.classList.contains("popup_opened")||t.target.classList.contains("popup__close"))&&e.close()}))}}])&&S(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function O(e){return O="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},O(e)}function C(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function L(){return L="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=P(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},L.apply(this,arguments)}function P(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=I(e)););return e}function j(e,t){return j=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},j(e,t)}function R(e,t){if(t&&("object"===O(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function I(e){return I=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},I(e)}var B=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&j(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=I(r);if(o){var n=I(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return R(this,e)});function a(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,e))._popupPhotoTitle=document.querySelector(".popup__caption"),t._popupPhotoImg=document.querySelector(".popup__img"),t}return t=a,(n=[{key:"open",value:function(e){var t=e.name,n=e.link;this._popupPhotoImg.src=n,this._popupPhotoImg.alt=t,this._popupPhotoTitle.textContent=t,L(I(a.prototype),"open",this).call(this)}}])&&C(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(E);function q(e){return q="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},q(e)}function T(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function D(){return D="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=x(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},D.apply(this,arguments)}function x(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=V(e)););return e}function A(e,t){return A=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},A(e,t)}function U(e,t){if(t&&("object"===q(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function V(e){return V=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},V(e)}var N=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&A(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=V(r);if(o){var n=V(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return U(this,e)});function a(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(n=i.call(this,e))._popupSelector=e,n._handleFormSubmit=t,n._formElement=n._popupSelector.querySelector(".form"),n._btnSave=n._formElement.querySelector(".form__bottom-submit"),n._btnSaveText=n._btnSave.textContent,n._formInputList=Array.from(n._formElement.querySelectorAll(".form__input")),n}return t=a,(n=[{key:"_getInputValues",value:function(){var e=this;return this._formValues={},this._formInputList.forEach((function(t){e._formValues[t.name]=t.value})),this._formValues}},{key:"setEventListeners",value:function(){var e=this;D(V(a.prototype),"setEventListeners",this).call(this),this._formElement.addEventListener("submit",(function(t){t.preventDefault(),e._handleFormSubmit(e._getInputValues())}))}},{key:"saveButton",value:function(e){this._btnSave.textContent=e?"Сохранение...":this._btnSaveText}},{key:"close",value:function(){D(V(a.prototype),"close",this).call(this),this._formElement.reset()}}])&&T(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(E);function G(e){return G="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},G(e)}function H(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function J(){return J="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=F(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},J.apply(this,arguments)}function F(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=$(e)););return e}function M(e,t){return M=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},M(e,t)}function z(e,t){if(t&&("object"===G(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function $(e){return $=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},$(e)}var K=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&M(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=$(r);if(o){var n=$(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return z(this,e)});function a(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,e))._popupSelector=e,t._formElement=t._popupSelector.querySelector(".form"),t._setConfirmAction=function(){},t}return t=a,(n=[{key:"setEventListeners",value:function(){var e=this;J($(a.prototype),"setEventListeners",this).call(this),this._formElement.addEventListener("submit",(function(t){t.preventDefault(),e._setConfirmAction()}))}},{key:"setConfirmAction",value:function(e){this._setConfirmAction=e}}])&&H(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(E);function Q(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var W=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._userName=t,this._userInfo=n,this._avatarSelector=document.querySelector(".profile__avatar")}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){var e={};return e.name=this._userName.textContent,e.about=this._userInfo.textContent,e.id=this._userId,e}},{key:"setUserInfo",value:function(e){this._data=e,this._userName.textContent=e.name,this._userInfo.textContent=e.about,this._avatarSelector.src=e.avatar,this._userId=e._id}}])&&Q(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function X(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var Y=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._url=t.url,this._headers=t.headers}var t,n;return t=e,(n=[{key:"_getResponseData",value:function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))}},{key:"getUserData",value:function(){return fetch("".concat(this._url,"/users/me"),{headers:this._headers}).then(this._getResponseData)}},{key:"getUserCards",value:function(){return fetch("".concat(this._url,"/cards"),{headers:this._headers}).then(this._getResponseData)}},{key:"setUserData",value:function(e){return fetch("".concat(this._url,"/users/me"),{headers:this._headers,method:"PATCH",body:JSON.stringify({name:e.name,about:e.about})}).then(this._getResponseData)}},{key:"setAvatarData",value:function(e){return fetch("".concat(this._url,"/users/me/avatar"),{headers:this._headers,method:"PATCH",body:JSON.stringify({avatar:e.avatar})}).then(this._getResponseData)}},{key:"pushNewCard",value:function(e){return fetch("".concat(this._url,"/cards"),{headers:this._headers,method:"POST",body:JSON.stringify({name:e.name,link:e.link})}).then(this._getResponseData)}},{key:"deleteCard",value:function(e){return fetch("https://mesto.nomoreparties.co/v1/cohort-48/cards/".concat(e),{headers:this._headers,method:"DELETE"}).then(this._getResponseData)}},{key:"setLike",value:function(e){return fetch("https://mesto.nomoreparties.co/v1/cohort-48/cards/".concat(e,"/likes"),{headers:this._headers,method:"PUT"}).then(this._getResponseData)}},{key:"removeLike",value:function(e){return fetch("https://mesto.nomoreparties.co/v1/cohort-48/cards/".concat(e,"/likes"),{headers:this._headers,method:"DELETE"}).then(this._getResponseData)}}])&&X(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}(),Z={formSelector:".form",inputSelector:".form__input",submitButtonSelector:".form__bottom-submit",inactiveButtonClass:"form__bottom-submit_status_inactive",inputErrorClass:"form__input_type_error",errorClass:"form__input-error_active"};function ee(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var te=new v(Z,s),ne=new v(Z,i),re=new v(Z,d);te.enableValidation(),ne.enableValidation(),re.enableValidation();var oe=new Y({url:"https://mesto.nomoreparties.co/v1/cohort-48",headers:{authorization:"25ce2e8c-2a55-4b07-a594-407cca6a6dd7","content-type":"application/json"}});function ie(e){e.currentUser=he.getUserInfo();var t=new g(e,"#card_template",{onClick:ce,onDeleteCard:function(e,t){le.open(),le.setConfirmAction((function(){oe.deleteCard(e._id).then((function(){t(),le.close()})).catch((function(e){console.log("Ошибка: ",e)}))}))},onLike:function(e,n){t.isLiked()?oe.removeLike(e._id).then((function(e){return n(e.likes)})).catch((function(e){console.log("Ошибка: ",e)})):oe.setLike(e._id).then((function(e){return n(e.likes)})).catch((function(e){console.log("Ошибка: ",e)}))}});return t.generateCard()}var ae=new w({renderer:function(e){var t=ie(e);ae.addItem(t)}},o),ue=new B(l);function ce(e,t){ue.open(e,t)}ue.setEventListeners(),n.addEventListener("click",(function(){ne.resetVadlidation();var e=he.getUserInfo(),t=e.name,n=e.about;a.value=t,u.value=n,ne.toggleButtonState(),se.open()}));var se=new N(r,(function(e){se.saveButton(!0),oe.setUserData(e).then((function(e){he.setUserInfo(e),se.close()})).catch((function(e){console.log("Ошибка: ",e)})).finally((function(){se.saveButton(!1)}))}));se.setEventListeners();var le=new K(p);le.setEventListeners(),Promise.all([oe.getUserCards(),oe.getUserData()]).then((function(e){var t,n,r=(n=2,function(e){if(Array.isArray(e))return e}(t=e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,u=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){u=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(u)throw o}}return i}}(t,n)||function(e,t){if(e){if("string"==typeof e)return ee(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ee(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],i=r[1];he.setUserInfo(i),ae.renderItems(o)})).catch((function(e){console.log(e)})),h.addEventListener("click",(function(){re.resetVadlidation(),fe.open(),re.toggleButtonState()}));var fe=new N(y,(function(e){fe.saveButton(!0),oe.setAvatarData(e).then((function(e){he.setUserInfo(e),fe.close()})).catch((function(e){console.log("Ошибка: ",e)})).finally((function(){fe.saveButton(!1)}))}));fe.setEventListeners();var pe=new N(c,(function(e){pe.saveButton(!0),oe.pushNewCard(e).then((function(e){ae.addItem(ie(e)),pe.close()})).catch((function(e){console.log(e)})).finally((function(){pe.saveButton(!1)}))}));pe.setEventListeners(),f.addEventListener("click",(function(){te.resetVadlidation(),pe.open(),te.toggleButtonState()}));var he=new W(e,t)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,