(()=>{"use strict";var e=document.querySelector(".profile__name"),t=document.querySelector(".profile__about"),n=document.querySelector(".profile__edit-button"),r=document.querySelector(".popup_type_profile"),o=document.querySelector(".element-list"),i=r.querySelector(".form"),a=r.querySelector(".form__input_type_name"),u=r.querySelector(".form__input_type_about"),c=document.querySelector(".popup_type_place"),l=c.querySelector(".form"),s=(c.querySelector(".form__input_type_name"),c.querySelector(".form__input_type_about"),document.querySelector(".popup_type_pic")),f=document.querySelector(".profile__place-button");function p(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function h(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}document.querySelector(".popup_type_notification");var y=function(){function e(t,n){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),h(this,"resetVadlidation",(function(){r._inputList.forEach((function(e){return r._hideInputError(e)}))})),h(this,"_setEventListeners",(function(){r.toggleButtonState(),r._inputList.forEach((function(e){e.addEventListener("input",(function(){r._isValidity(e),r.toggleButtonState()}))}))})),this._config=t,this._formElement=n,this._inputList=Array.from(n.querySelectorAll(t.inputSelector)),this._buttonElement=n.querySelector(t.submitButtonSelector)}var t,n;return t=e,(n=[{key:"_isValidity",value:function(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}},{key:"_hasInvalidInput",value:function(){return this._inputList.some((function(e){return!e.validity.valid}))}},{key:"_showInputError",value:function(e){var t=this._formElement.querySelector(".".concat(e.id,"-error"));e.classList.add(this._config.inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._config.errorClass)}},{key:"_hideInputError",value:function(e){var t=this._formElement.querySelector(".".concat(e.id,"-error"));e.classList.remove(this._config.inputErrorClass),t.classList.remove(this._config.errorClass),t.textContent=""}},{key:"toggleButtonState",value:function(){this._hasInvalidInput()?this._setDisabledButton():this._setEnabledButton()}},{key:"_setDisabledButton",value:function(){this._buttonElement.classList.add(this._config.inactiveButtonClass),this._buttonElement.disabled=!0}},{key:"_setEnabledButton",value:function(){this._buttonElement.classList.remove(this._config.inactiveButtonClass),this._buttonElement.disabled=!1}},{key:"enableValidation",value:function(){this._setEventListeners()}}])&&p(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function _(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var d=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._data=t,this._handleCardClick=n,this._cardTemplate=r,this._element=this._getTemplate(),this.maskGroupImg=this._element.querySelector(".element__mask-group"),this.maskGroupName=this._element.querySelector(".element__place-name"),this._likeButton=this._element.querySelector(".element__like-button"),this._btnRemoveCard=this._element.querySelector(".element__btn-remove"),this.likesElement=this._element.querySelector(".element__like-counter"),this.maskGroupImg.src=this._data.link,this.maskGroupName.textContent=this._data.name,this.maskGroupImg.alt=this._data.name,this.likesElement.textContent=this._data.likes.length,this._setEventListeners()}var t,n;return t=e,(n=[{key:"_getTemplate",value:function(){return document.querySelector(this._cardTemplate).content.querySelector(".element").cloneNode(!0)}},{key:"generateCard",value:function(){return this._element}},{key:"_setEventListeners",value:function(){var e=this;this._likeButton.addEventListener("click",(function(){e._handleLikeBtnClick()})),this._btnRemoveCard.addEventListener("click",(function(){e._handleTrashBtnClick()})),this.maskGroupImg.addEventListener("click",(function(){e._handleCardClick({name:e._data.name,link:e._data.link})}))}},{key:"_handleLikeBtnClick",value:function(){this._likeButton.classList.toggle("element__like-button_active")}},{key:"_handleTrashBtnClick",value:function(){this._element.remove(),this._element=null}}])&&_(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function m(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var v=function(){function e(t,n){var r=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._functionRender=r,this._container=n}var t,n;return t=e,(n=[{key:"renderItems",value:function(e){var t=this;e.forEach((function(e){return t._functionRender(e)}))}},{key:"addItem",value:function(e){console.log(e),this._container.prepend(e)}}])&&m(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function b(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var g=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._popupElement=t,this._handleEscCloseBinded=this._handleEscClose.bind(this)}var t,n;return t=e,(n=[{key:"open",value:function(){this._popupElement.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscCloseBinded)}},{key:"close",value:function(){this._popupElement.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscCloseBinded)}},{key:"_handleEscClose",value:function(e){"Escape"===e.key&&this.close()}},{key:"setEventListeners",value:function(){var e=this;this._popupElement.addEventListener("mousedown",(function(t){(t.target.classList.contains("popup_opened")||t.target.classList.contains("popup__close"))&&e.close()}))}}])&&b(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function k(e){return k="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},k(e)}function E(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function w(){return w="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=S(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},w.apply(this,arguments)}function S(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=j(e)););return e}function O(e,t){return O=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},O(e,t)}function C(e,t){if(t&&("object"===k(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function j(e){return j=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},j(e)}var P=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&O(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=j(r);if(o){var n=j(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return C(this,e)});function a(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,e))._popupPhotoTitle=document.querySelector(".popup__caption"),t._popupPhotoImg=document.querySelector(".popup__img"),t}return t=a,(n=[{key:"open",value:function(e){var t=e.name,n=e.link;this._popupPhotoImg.src=n,this._popupPhotoImg.alt=t,this._popupPhotoTitle.textContent=t,w(j(a.prototype),"open",this).call(this)}}])&&E(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(g);function L(e){return L="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},L(e)}function I(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function q(){return q="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=B(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},q.apply(this,arguments)}function B(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=x(e)););return e}function R(e,t){return R=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},R(e,t)}function T(e,t){if(t&&("object"===L(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function x(e){return x=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},x(e)}var V=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&R(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=x(r);if(o){var n=x(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return T(this,e)});function a(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(n=i.call(this,e))._popupElement=e,n._handleFormSubmit=t,n._formElement=n._popupElement.querySelector(".form"),n._formInputList=Array.from(n._formElement.querySelectorAll(".form__input")),n}return t=a,(n=[{key:"_getInputValues",value:function(){var e=this;return this._formValues={},this._formInputList.forEach((function(t){e._formValues[t.name]=t.value})),this._formValues}},{key:"setEventListeners",value:function(){var e=this;q(x(a.prototype),"setEventListeners",this).call(this),this._formElement.addEventListener("submit",(function(t){t.preventDefault(),e._handleFormSubmit(e._getInputValues())}))}},{key:"close",value:function(){q(x(a.prototype),"close",this).call(this),this._formElement.reset()}}])&&I(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(g);function D(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var U=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._userName=t,this._userInfo=n,this._avatarSelector=document.querySelector(".profile__avatar")}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){var e={};return e.name=this._userName.textContent,e.info=this._userInfo.textContent,e}},{key:"setUserInfo",value:function(e){var t=e.name,n=e.info,r=e.avatar;this._userName.textContent=t,this._userInfo.textContent=n,this._avatarSelector.src=r}}])&&D(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function N(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var G=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._url=t.url,this._headers=t.headers}var t,n;return t=e,(n=[{key:"getUserData",value:function(){return fetch("".concat(this._url,"/users/me"),{headers:this._headers}).then((function(e){if(e.ok)return e.json()})).catch((function(e){console.log(e)}))}},{key:"getUserCards",value:function(){return fetch("".concat(this._url,"/cards"),{headers:this._headers}).then((function(e){if(e.ok)return e.json()})).catch((function(e){console.log(e)}))}},{key:"setUserData",value:function(e){return fetch("".concat(this._url,"/users/me"),{headers:this._headers,method:"PATCH",body:JSON.stringify({name:e.name,about:e.about})}).then((function(e){if(e.ok)return e.json()}))}},{key:"pushNewCard",value:function(e){return console.log(e),fetch("".concat(this._url,"/cards"),{headers:this._headers,method:"POST",body:JSON.stringify({name:e.name,link:e.link})}).then((function(e){if(e.ok)return e.json()}))}}])&&N(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}(),A={formSelector:".form",inputSelector:".form__input",submitButtonSelector:".form__bottom-submit",inactiveButtonClass:"form__bottom-submit_status_inactive",inputErrorClass:"form__input_type_error",errorClass:"form__input-error_active"},F=new y(A,l),J=new y(A,i);function z(e){return new d(e,W,"#card_template").generateCard()}F.enableValidation(),J.enableValidation();var H=new G({url:"https://mesto.nomoreparties.co/v1/cohort-48",headers:{authorization:"25ce2e8c-2a55-4b07-a594-407cca6a6dd7","content-type":"application/json"}}),M=new v({renderer:function(e){var t=z(e);M.addItem(t)}},o),K=new V(c,(function(e){H.pushNewCard(e).then((function(e){M.addItem(z(e)).catch((function(e){console.log(e)}))})),K.close()}));K.setEventListeners(),H.getUserCards().then((function(e){return M.renderItems(e)}));var Q=new P(s);function W(e,t){Q.open(e,t)}Q.setEventListeners();var X=new V(r,(function(e){var t=e.name,n=e.about;H.setUserData({name:t,about:n}).then((function(e){return Y.setUserInfo({name:e.name,info:e.about,avatar:e.avatar})})),X.close()}));X.setEventListeners(),H.getUserData().then((function(e){return Y.setUserInfo({name:e.name,info:e.about,avatar:e.avatar})})),n.addEventListener("click",(function(){J.resetVadlidation();var e=Y.getUserInfo(),t=e.name,n=e.info;a.value=t,u.value=n,J.toggleButtonState(),X.open()}));var Y=new U(e,t);f.addEventListener("click",(function(){F.resetVadlidation(),K.open(),F.toggleButtonState()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,