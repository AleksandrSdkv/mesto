(()=>{"use strict";var e=document.querySelector(".profile__name"),t=document.querySelector(".profile__about"),n=document.querySelector(".profile__edit-button"),r=document.querySelector(".popup_type_profile"),o=document.querySelector(".element-list"),i=r.querySelector(".form"),a=r.querySelector(".form__input_type_name"),u=r.querySelector(".form__input_type_about"),c=document.querySelector(".popup_type_place"),s=c.querySelector(".form"),l=(c.querySelector(".form__input_type_name"),c.querySelector(".form__input_type_about"),document.querySelector(".popup_type_pic")),f=document.querySelector(".profile__place-button"),p=document.querySelector(".popup_type_notification"),h=document.querySelector(".profile__overlay"),y=document.querySelector(".popup_type_for-avatar"),d=y.querySelector(".form");function _(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function m(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var v=function(){function e(t,n){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),m(this,"resetVadlidation",(function(){r._inputList.forEach((function(e){return r._hideInputError(e)}))})),m(this,"_setEventListeners",(function(){r.toggleButtonState(),r._inputList.forEach((function(e){e.addEventListener("input",(function(){r._isValidity(e),r.toggleButtonState()}))}))})),this._config=t,this._formElement=n,this._inputList=Array.from(n.querySelectorAll(t.inputSelector)),this._buttonElement=n.querySelector(t.submitButtonSelector)}var t,n;return t=e,(n=[{key:"_isValidity",value:function(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}},{key:"_hasInvalidInput",value:function(){return this._inputList.some((function(e){return!e.validity.valid}))}},{key:"_showInputError",value:function(e){var t=this._formElement.querySelector(".".concat(e.id,"-error"));e.classList.add(this._config.inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._config.errorClass)}},{key:"_hideInputError",value:function(e){var t=this._formElement.querySelector(".".concat(e.id,"-error"));e.classList.remove(this._config.inputErrorClass),t.classList.remove(this._config.errorClass),t.textContent=""}},{key:"toggleButtonState",value:function(){this._hasInvalidInput()?this._setDisabledButton():this._setEnabledButton()}},{key:"_setDisabledButton",value:function(){this._buttonElement.classList.add(this._config.inactiveButtonClass),this._buttonElement.disabled=!0}},{key:"_setEnabledButton",value:function(){this._buttonElement.classList.remove(this._config.inactiveButtonClass),this._buttonElement.disabled=!1}},{key:"enableValidation",value:function(){this._setEventListeners()}}])&&_(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function b(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var g=function(){function e(t,n,r,o){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._data=t,this._handleCardClick=n,this._cardTemplate=r,this._element=this._getTemplate(),this.maskGroupImg=this._element.querySelector(".element__mask-group"),this.maskGroupName=this._element.querySelector(".element__place-name"),this._likeButton=this._element.querySelector(".element__like-button"),this._btnRemoveCard=this._element.querySelector(".element__btn-remove"),this.likesElement=this._element.querySelector(".element__like-counter"),this.maskGroupImg.src=this._data.link,this.maskGroupName.textContent=this._data.name,this.maskGroupImg.alt=this._data.name,this.likesElement.textContent=this._data.likes.length,this._ownerID="2341679b0114bf727da8f477",this.data_id=t._id,this._isCardMine=t.owner._id===this._ownerID,this._removePic=o,this._setEventListeners()}var t,n;return t=e,(n=[{key:"_getTemplate",value:function(){return document.querySelector(this._cardTemplate).content.querySelector(".element").cloneNode(!0)}},{key:"generateCard",value:function(){return this._isCardMine&&this._btnRemoveCard.classList.remove("popup_hidden"),this._element}},{key:"_setEventListeners",value:function(){var e=this;this._likeButton.addEventListener("click",(function(){e._handleLikeBtnClick()})),this._btnRemoveCard.addEventListener("click",(function(){e._removePic(e._data,(function(){e._handleTrashBtnClick()}))})),this.maskGroupImg.addEventListener("click",(function(){e._handleCardClick({name:e._data.name,link:e._data.link})}))}},{key:"_handleLikeBtnClick",value:function(){this._likeButton.classList.toggle("element__like-button_active")}},{key:"_handleTrashBtnClick",value:function(){this._element.remove(),this._element=null}}])&&b(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function k(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var E=function(){function e(t,n){var r=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._functionRender=r,this._container=n}var t,n;return t=e,(n=[{key:"renderItems",value:function(e){var t=this;e.reverse().forEach((function(e){return t._functionRender(e)}))}},{key:"addItem",value:function(e){this._container.prepend(e)}}])&&k(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function w(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var O=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._popupElement=t,this._handleEscCloseBinded=this._handleEscClose.bind(this)}var t,n;return t=e,(n=[{key:"open",value:function(){this._popupElement.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscCloseBinded)}},{key:"close",value:function(){this._popupElement.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscCloseBinded)}},{key:"_handleEscClose",value:function(e){"Escape"===e.key&&this.close()}},{key:"setEventListeners",value:function(){var e=this;this._popupElement.addEventListener("mousedown",(function(t){(t.target.classList.contains("popup_opened")||t.target.classList.contains("popup__close"))&&e.close()}))}}])&&w(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function S(e){return S="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},S(e)}function j(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function C(){return C="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=P(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},C.apply(this,arguments)}function P(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=q(e)););return e}function L(e,t){return L=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},L(e,t)}function I(e,t){if(t&&("object"===S(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function q(e){return q=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},q(e)}var R=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&L(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=q(r);if(o){var n=q(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return I(this,e)});function a(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,e))._popupPhotoTitle=document.querySelector(".popup__caption"),t._popupPhotoImg=document.querySelector(".popup__img"),t}return t=a,(n=[{key:"open",value:function(e){var t=e.name,n=e.link;this._popupPhotoImg.src=n,this._popupPhotoImg.alt=t,this._popupPhotoTitle.textContent=t,C(q(a.prototype),"open",this).call(this)}}])&&j(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(O);function B(e){return B="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},B(e)}function T(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function D(){return D="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=A(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},D.apply(this,arguments)}function A(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=x(e)););return e}function U(e,t){return U=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},U(e,t)}function V(e,t){if(t&&("object"===B(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function x(e){return x=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},x(e)}var N=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&U(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=x(r);if(o){var n=x(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return V(this,e)});function a(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(n=i.call(this,e))._popupElement=e,n._handleFormSubmit=t,n._formElement=n._popupElement.querySelector(".form"),n._formInputList=Array.from(n._formElement.querySelectorAll(".form__input")),n}return t=a,(n=[{key:"_getInputValues",value:function(){var e=this;return this._formValues={},this._formInputList.forEach((function(t){e._formValues[t.name]=t.value})),this._formValues}},{key:"setEventListeners",value:function(){var e=this;D(x(a.prototype),"setEventListeners",this).call(this),this._formElement.addEventListener("submit",(function(t){t.preventDefault(),e._handleFormSubmit(e._getInputValues())}))}},{key:"close",value:function(){D(x(a.prototype),"close",this).call(this),this._formElement.reset()}}])&&T(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(O);function G(e){return G="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},G(e)}function J(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function M(){return M="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=F(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},M.apply(this,arguments)}function F(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=K(e)););return e}function H(e,t){return H=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},H(e,t)}function z(e,t){if(t&&("object"===G(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function K(e){return K=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},K(e)}var Q=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&H(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=K(r);if(o){var n=K(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return z(this,e)});function a(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,e))._popupElement=e,t._formElement=t._popupElement.querySelector(".form"),t._setConfirmAction=function(){},t}return t=a,(n=[{key:"setEventListeners",value:function(){var e=this;M(K(a.prototype),"setEventListeners",this).call(this),this._formElement.addEventListener("submit",(function(t){t.preventDefault(),e._setConfirmAction()}))}},{key:"setConfirmAction",value:function(e){this._setConfirmAction=e}}])&&J(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(O);function W(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var X=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._userName=t,this._userInfo=n,this._avatarSelector=document.querySelector(".profile__avatar"),this._id=getUserId()}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return this._data}},{key:"setUserInfo",value:function(e){return this._data=e,this._userName.textContent=e.name,this._userInfo.textContent=e.about,this._id=this._data}},{key:"getUserId",value:function(){return this._id}},{key:"setAvatar",value:function(e){this._avatarSelector.src=e.avatar}}])&&W(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function Y(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var Z=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._url=t.url,this._headers=t.headers}var t,n;return t=e,(n=[{key:"getUserData",value:function(){return fetch("".concat(this._url,"/users/me"),{headers:this._headers}).then((function(e){if(e.ok)return e.json()})).catch((function(e){console.log(e)}))}},{key:"getUserCards",value:function(){return fetch("".concat(this._url,"/cards"),{headers:this._headers}).then((function(e){if(e.ok)return e.json()})).catch((function(e){console.log(e)}))}},{key:"setUserData",value:function(e){return fetch("".concat(this._url,"/users/me"),{headers:this._headers,method:"PATCH",body:JSON.stringify({name:e.name,about:e.about})}).then((function(e){if(e.ok)return e.json()}))}},{key:"setAvatarData",value:function(e){return fetch("".concat(this._url,"/users/me/avatar"),{headers:this._headers,method:"PATCH",body:JSON.stringify({avatar:e.avatar})}).then((function(e){if(e.ok)return e.json()}))}},{key:"pushNewCard",value:function(e){return fetch("".concat(this._url,"/cards"),{headers:this._headers,method:"POST",body:JSON.stringify({name:e.name,link:e.link})}).then((function(e){if(e.ok)return e.json()}))}},{key:"deleteCard",value:function(e){return fetch("https://mesto.nomoreparties.co/v1/cohort-48/cards/".concat(e),{headers:this._headers,method:"DELETE"}).then((function(e){if(e.ok)return e.json()}))}},{key:"putLike",value:function(e){return fetch("https://mesto.nomoreparties.co/v1/cohort-48/cards/".concat(e,"/likes"),{headers:this._headers,method:"PUT"}).then((function(e){if(e.ok)return console.log(e),e.json()}))}},{key:"removeLike",value:function(e){return fetch("https://mesto.nomoreparties.co/v1/cohort-48/cards/".concat(e,"/likes"),{headers:this._headers,method:"DELETE"}).then((function(e){if(e.ok)return console.log(e),e.json()}))}}])&&Y(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}(),$={formSelector:".form",inputSelector:".form__input",submitButtonSelector:".form__bottom-submit",inactiveButtonClass:"form__bottom-submit_status_inactive",inputErrorClass:"form__input_type_error",errorClass:"form__input-error_active"},ee=new v($,s),te=new v($,i),ne=new v($,d);function re(e){return new g(e,ae,"#card_template",(function(e,t){ce.open(),ce.setConfirmAction((function(){se.deleteCard(e._id).then((function(){t(),ce.close()}))}))})).generateCard()}ee.enableValidation(),te.enableValidation(),ne.enableValidation();var oe=new E({renderer:function(e){var t=re(e);oe.addItem(t)}},o),ie=new R(l);function ae(e,t){ie.open(e,t)}ie.setEventListeners();var ue=new N(r,(function(e){se.setUserData(e).then((function(e){pe.setUserInfo(e)})),ue.close()}));ue.setEventListeners();var ce=new Q(p);ce.setEventListeners();var se=new Z({url:"https://mesto.nomoreparties.co/v1/cohort-48",headers:{authorization:"25ce2e8c-2a55-4b07-a594-407cca6a6dd7","content-type":"application/json"}});se.getUserCards().then((function(e){return oe.renderItems(e)})).catch((function(e){console.log(e)}));var le=new N(y,(function(e){se.setAvatarData(e).then((function(e){pe.setAvatar(e)})),le.close()})),fe=new N(c,(function(e){se.pushNewCard(e).then((function(e){oe.addItem(re(e))})).catch((function(e){console.log(e)})),fe.close()}));fe.setEventListeners(),le.setEventListeners(),h.addEventListener("click",(function(){ne.resetVadlidation(),le.open(),ne.toggleButtonState()})),n.addEventListener("click",(function(){te.resetVadlidation();var e=pe.getUserInfo(),t=e.name,n=e.about;a.value=t,u.value=n,te.toggleButtonState(),ue.open()}));var pe=new X(e,t);pe.getUserId(),se.getUserData().then((function(e){pe.getUserInfo(),pe.setUserInfo(e),pe.setAvatar(e)})).catch((function(e){console.log(e)})),f.addEventListener("click",(function(){ee.resetVadlidation(),fe.open(),ee.toggleButtonState()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,